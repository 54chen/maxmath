/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Blender3D (https://sketchfab.com/Blender3D)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/0d62f4d3676545c88ec8523213c055dd
title: Minecraft Diamond Hammer
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import hammer from './assets/hammer.glb?url'

type HammerProps = JSX.IntrinsicElements['group']; // 使用JSX.IntrinsicElements获取group元素的属性类型

type ActionName = 'actionNameOne' | 'actionNameTwo';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Mesh_1001_1: THREE.Mesh
    Mesh_1001_2: THREE.Mesh
  }
  materials: {
    material_2: THREE.MeshStandardMaterial
    material_3: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

const Hammer: React.FC<HammerProps> = (props) => {
  const { nodes, materials } = useGLTF(hammer) as GLTFResult; // 根据useGLTF的返回值类型进行类型断言
  return (
    <group dispose={null} {...props}>
      <group rotation={[0, Math.PI / 1.8, -0.3]} scale={0.5}>
        <mesh geometry={nodes.Mesh_1001_1.geometry} material={materials.material_2} />
        <mesh geometry={nodes.Mesh_1001_2.geometry} material={materials.material_3} />
      </group>
    </group>
  );
};
useGLTF.preload(hammer);

export default Hammer;

