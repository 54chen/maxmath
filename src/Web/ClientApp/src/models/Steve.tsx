/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 src/assets/steve.glb -t -o src/Steve.tsx 
Author: Vincent Yanez (https://sketchfab.com/vinceyanez)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/minecraft-steve-cb228dcc137042cc9a3dc588758cc6e9
Title: Minecraft - Steve
*/

import * as THREE from 'three'
// import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import SteveURL from './assets/steve.glb?url'
import { useRef,useState } from "react";
import Mark from './Mark';

type ActionName = 'actionNameOne' | 'actionNameTwo';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    ['Steve_02_-_Default_0']: THREE.Mesh
  }
  materials: {
    ['02_-_Default']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Steve(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(SteveURL) as GLTFResult
  const mark = useRef<THREE.Group>(null)
  const [isVisible, setIsVisible] = useState(false);

  const pointOver = () => {
    setIsVisible(true)
  }
  const piontLeave = () => {
    setIsVisible(false)
  }
  return (
    <group {...props} dispose={null} onPointerOver={pointOver} onPointerLeave={piontLeave}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes['Steve_02_-_Default_0'].geometry} material={materials['02_-_Default']} position={[0, 0, -4]} />
      </group>
      <group ref={mark} visible={isVisible}>
        <Mark scale={0.01} position={[0, 16, 0]}/>
      </group>
    </group>
  )
}

useGLTF.preload(SteveURL)
